# -*- coding: utf-8 -*-
"""Event_scheduler.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ayYGxxmiUR2RNGzbw0a6SqBaWL15KrEx
"""

import numpy as np
import threading
import sys

LOG = ''

class GeneticAlgorithm(threading.Thread):
  def __init__(self,day,userPreferredScheduleForDay,userPreferencePriority,userCount,geneCount,populationSize,parentCount,generationCount):
    threading.Thread.__init__(self)
    self.day = day
    self.userPreferredScheduleForDay = userPreferredScheduleForDay
    self.userPreferencePriority = userPreferencePriority
    self.userCount = userCount
    self.populationSize = populationSize
    self.geneCount = geneCount
    self.population = np.random.randint(low=1,high=self.userCount+1,size=(self.populationSize,self.geneCount))
    self.chromosomeScore = np.zeros(8)
    self.parentCount = parentCount
    self.generationCount = generationCount
  
  def run(self):
    global LOG
    self.__initialization__()

    for i in range(self.generationCount):
      LOG += '\n DAY '+str(self.day)+' GENERATION '+str(i)+' \n'
      
      self.__fitnessCalculation__()
      self.__crossover__()

    self.__fitnessCalculation__()

    self.optimizedChromosome = self.population[np.argmax(self.chromosomeScore,axis=0)]
    LOG += '\n DAY '+str(self.day)+' OPTIMIZED CHROMOSOME : '+str(self.optimizedChromosome)+' \n'

  def __initialization__(self):
    global LOG
    LOG += '\n DAY '+str(self.day)+' INITIAL POPULATION \n'
    LOG += '\n'+str(self.population)+'\n'
    

  def __fitnessCalculation__(self):
    global LOG

    for chromosome in range(self.populationSize):
      for shiftPreference in range(self.geneCount):
        # userList = []
        # for i in range(self.userCount):
        #   if self.userPreferredScheduleForDay[i][shiftPreference] == True:
        #     userList.append(i)
        # userListPriority = []
        # for i in userList:
        #   userListPriority.append(self.userPreferencePriority[i])
        # userIndex = userListPriority.index(max(userListPriority))
        # priorityUser = userList[userIndex]

        if self.userPreferredScheduleForDay[self.population[chromosome][shiftPreference]-1][shiftPreference] == True:# and self.population[chromosome][shiftPreference] == priorityUser:
          self.chromosomeScore[chromosome] += self.populationSize
        else:
          self.chromosomeScore[chromosome] -= self.populationSize
    
    LOG += '\n DAY '+str(self.day)+' POPULATION FITNESS : \n\n'+str(self.chromosomeScore)+'\n'
    
  
  def __crossover__(self):
    global LOG

    chromosomeIndices = np.argsort(self.chromosomeScore,axis=0)
    parentChromosomeIndices = chromosomeIndices[:self.parentCount]
    eliminatedChromosomeIndices = chromosomeIndices[self.parentCount:]
    parentChromosomes = np.asarray([self.population[i] for i in parentChromosomeIndices])

    LOG += '\n DAY '+str(self.day)+' PARENT CHROMOSOMES : \n\n'+str(parentChromosomes)+'\n'
    

    childChromosomes = np.ndarray((self.parentCount,self.geneCount),dtype=np.int)
    crossoverPoint = int(self.geneCount/2)

    LOG += '\n CROSSOVER POINT : '+str(crossoverPoint)+'\n'

    for i in range(0,self.parentCount,2):
      parentSlice1 = parentChromosomes[i,:crossoverPoint]
      parentSlice2 = parentChromosomes[i+1,crossoverPoint:]
      parentSlice3 = parentChromosomes[i+1,:crossoverPoint]
      parentSlice4 = parentChromosomes[i,crossoverPoint:]
      

      childChromosomes[i] = np.concatenate((parentSlice1,parentSlice2))
      childChromosomes[i+1] = np.concatenate((parentSlice3,parentSlice4))

    LOG += '\n DAY '+str(self.day)+' CHILD CHROMOSOMES BEFORE MUTATION : \n\n'+str(childChromosomes)+'\n'
    
    self.chromosomeScore = np.zeros(8)
    for i in range(self.parentCount):
      childChromosomes[i][np.random.randint(self.geneCount)] = np.random.randint(low=1,high=self.userCount+1)
      self.population[eliminatedChromosomeIndices[i]] = childChromosomes[i]

    LOG += '\n DAY '+str(self.day)+' CHILD CHROMOSOMES AFTER MUTATION : \n\n'+str(childChromosomes)+'\n'
    
    LOG += '\n DAY '+str(self.day)+' NEW POPULATION : \n\n'+str(self.population)+'\n'

class User:
  def __init__(self,userID,preferredSchedule,preferencePriority):
    self.userID = userID
    self.preferredSchedule = preferredSchedule
    self.preferencePriority = preferencePriority

  def __displayDetails__(self):
    global LOG
    LOG += '\n### User '+str(self.userID)+' ###\n'
    LOG += '\n'+str(self.preferredSchedule)+'\n'

class Event_Schedule:
  def __init__(self,users,userCount,days,shiftCount,populationSize,parentCount,generationCount):
    self.users = users
    self.days = days
    self.userCount = userCount
    self.shiftCount = shiftCount
    self.populationSize = populationSize
    self.parentCount = parentCount
    self.generationCount = generationCount
  
  def __generateSchedule__(self): 
    global LOG

    userPreferencePriority = np.ndarray(self.userCount)
    for user in range(self.userCount):
      userPreferencePriority[user] = self.users[user].preferencePriority

    LOG += '\n USER PREFERENCE PRIORITY : '+str(userPreferencePriority)+'\n'
    
    self.eventSchedule = []
    for day in range(self.days):
      userPreferredScheduleForDay = np.ndarray((self.userCount,self.shiftCount),dtype=np.bool)
      for user in range(self.userCount):
        userPreferredScheduleForDay[user] = self.users[user].preferredSchedule[day]
      gaOptimizer = GeneticAlgorithm(day,userPreferredScheduleForDay,userPreferencePriority,self.userCount,self.shiftCount,self.populationSize,self.parentCount,self.generationCount)
      gaOptimizer.start()
      gaOptimizer.join()
      self.eventSchedule.append(gaOptimizer.optimizedChromosome)
    self.eventSchedule = np.asarray(self.eventSchedule)

  def __displaySchedule__(self):
    global LOG

    eventSchedule = '\n\t\t\t\t ### EVENT SCHEDULE ###\n\n\t\t'
    for i in range(self.shiftCount):
      eventSchedule += 'SHIFT '+str(i+1)+'\t\t'
    eventSchedule += '\n----------------------------------------------------------------------------\n'
    for i in range(self.days):
      eventSchedule += 'DAY '+str(i+1)+' |\t\t'
      for j in self.eventSchedule[i]:
        eventSchedule += 'USER '+str(j)+'\t\t'
      eventSchedule += '\n'
    eventSchedule += '\n'

    output_file = open('eventSchedule.txt', 'w')
    output_file.write(eventSchedule)
    output_file.close()

    LOG += eventSchedule

if __name__ == '__main__':
  USER_COUNT = 2
  SHIFT_COUNT = 4
  DAYS = 2

  POPULATION_SIZE = 8
  PARENT_COUNT = 4
  GENERATION_COUNT = 3

  userIDs = [i+1 for i in range(USER_COUNT)]
  preferredSchedules = np.asarray([[[True,False,True,False],[False,True,False,True]],[[False,True,False,True],[True,False,True,False]]])

  users = [User(userIDs[i],preferredSchedules[i],USER_COUNT-i) for i in range(USER_COUNT)]
  for i in range(USER_COUNT):
    users[i].__displayDetails__()

  eventSchedule = Event_Schedule(users,USER_COUNT,DAYS,SHIFT_COUNT,POPULATION_SIZE,PARENT_COUNT,GENERATION_COUNT)
  eventSchedule.__generateSchedule__()
  eventSchedule.__displaySchedule__()

  # print(LOG)